# -*- coding: utf-8 -*-
"""
Generated by ArcGIS ModelBuilder on : 2020-05-30 15:51:02
"""
import arcpy
from sys import argv

def Detekce(ORTOFOTO="Praha7080_CIR.jpg", DSM="Praha7080_DSM.tif", DTM="C:\\Detekce\\Data\\TER_BUD.tif", _Name_KorunBody=fr"C:\Detekce\Detekce.gdb\{Name}_KorunBody", _Name_KorunyPolygony=fr"C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony", _Name_Klasifikace=fr"C:\Detekce\Detekce.gdb\{Name}_Klasifikace"):  # Detekce

    # To allow overwriting outputs change overwriteOutput option to True.
    arcpy.env.overwriteOutput = False

    # Check out any necessary licenses.
    arcpy.CheckOutExtension("spatial")
    arcpy.CheckOutExtension("ImageAnalyst")
    arcpy.CheckOutExtension("3D")

    arcpy.ImportToolbox(r"c:\program files\arcgis\pro\Resources\ArcToolbox\toolboxes\Data Management Tools.tbx")
    # Model Environment settings
    with arcpy.EnvManager(extent="-745625 -1042000 -743750 -1040500"):

        # Process: Resample (Resample) 
        DTM_Resample = "C:\\Detekce\\Detekce.gdb\\DTM_Resample"
        arcpy.Resample_management(in_raster=DTM, out_raster=DTM_Resample, cell_size="0.25 0.25", resampling_type="NEAREST")

        # Process: Raster Calculator (5) (Raster Calculator) 
        CHM = "C:\\Detekce\\Detekce.gdb\\CHM"
        if DTM_Resample:
            arcpy.gp.RasterCalculator_sa(expression=[DSM, DTM_Resample], output_raster=CHM)

        # Process: Make Raster Layer (Make Raster Layer) 
        Band_1 = "Band_1"
        arcpy.MakeRasterLayer_management(in_raster=ORTOFOTO, out_rasterlayer=Band_1, where_clause="", envelope="-745625 -1042000 -743750 -1040500", band_index=[1])

        # Process: Make Raster Layer (2) (Make Raster Layer) 
        Band_2 = "Band_2"
        arcpy.MakeRasterLayer_management(in_raster=ORTOFOTO, out_rasterlayer=Band_2, where_clause="", envelope="-745625 -1042000 -743750 -1040500", band_index=[2])

        # Process: Make Raster Layer (3) (Make Raster Layer) 
        Band_3 = "Band3"
        arcpy.MakeRasterLayer_management(in_raster=ORTOFOTO, out_rasterlayer=Band_3, where_clause="", envelope="-745625 -1042000 -743750 -1040500", band_index=[3])

        # Process: Raster Calculator (2) (Raster Calculator) 
        RTVIcore = "C:\\Detekce\\Detekce.gdb\\RTVIcore"
        if Band_1 and Band_2 and Band_3:
            arcpy.gp.RasterCalculator_sa(expression=[Band_1, Band_2, Band_1, Band_3], output_raster=RTVIcore)

        # Process: Fuzzy Membership (2) (Fuzzy Membership) 
        FuzzyRTVI = "C:\\Detekce\\Detekce.gdb\\FuzzyRTVI"
        if Band_1 and Band_2 and Band_3:
            arcpy.gp.FuzzyMembership_sa(in_raster=RTVIcore, out_raster=FuzzyRTVI, fuzzy_function=[["MSLARGE", 1, 1]], hedge="NONE")

        # Process: Raster Calculator (Raster Calculator) 
        NDVI = "C:\\Detekce\\Detekce.gdb\\NDVI"
        if Band_1 and Band_2:
            arcpy.gp.RasterCalculator_sa(expression=[Band_1, Band_2, Band_1, Band_2], output_raster=NDVI)

        # Process: Fuzzy Membership (3) (Fuzzy Membership) 
        FuzzyNDVI = "C:\\Detekce\\Detekce.gdb\\FuzzyNDVI"
        if Band_1 and Band_2:
            arcpy.gp.FuzzyMembership_sa(in_raster=NDVI, out_raster=FuzzyNDVI, fuzzy_function=[["MSLARGE", 1, 1]], hedge="NONE")

        # Process: Fuzzy Overlay (Fuzzy Overlay) 
        FuzzyVegetation = "C:\\Detekce\\Detekce.gdb\\FuzzyVegetation"
        if Band_1 and Band_2 and Band_3:
            arcpy.gp.FuzzyOverlay_sa(in_rasters=[FuzzyRTVI, FuzzyNDVI], out_raster=FuzzyVegetation, overlay_type="OR", gamma=0.9)

        # Process: Extract by Attributes (Extract by Attributes) 
        FuzzyExtract = "C:\\Detekce\\Detekce.gdb\\FuzzyExtract"
        if Band_1 and Band_2 and Band_3:
            arcpy.gp.ExtractByAttributes_sa(in_raster=FuzzyVegetation, where_clause="VALUE > 0", out_raster=FuzzyExtract)

        # Process: Raster Calculator (4) (Raster Calculator) 
        BinaryMask = "C:\\Detekce\\Detekce.gdb\\BinaryMask"
        if Band_1 and Band_2 and Band_3:
            arcpy.RasterCalculator_ia(expression=[FuzzyExtract], output_raster=BinaryMask)

        # Process: Majority Filter (Majority Filter) 
        BinariMask_Majority = "C:\\Detekce\\Detekce.gdb\\BinariMask_Majority"
        if Band_1 and Band_2 and Band_3:
            arcpy.gp.MajorityFilter_sa(in_raster=BinaryMask, out_raster=BinariMask_Majority, number_neighbors="EIGHT", majority_definition="MAJORITY")

        # Process: Boundary Clean (Boundary Clean) 
        BinariMaskCleaned = "C:\\Detekce\\Detekce.gdb\\BinariMaskCleaned"
        if Band_1 and Band_2 and Band_3:
            arcpy.gp.BoundaryClean_sa(in_raster=BinariMask_Majority, out_raster=BinariMaskCleaned, sort_type="NO_SORT", number_of_runs="TWO_WAY")

        # Process: Raster Calculator (6) (Raster Calculator) 
        BinariMaskNULL = "C:\\Detekce\\Detekce.gdb\\BinariMaskNULL"
        if Band_1 and Band_2 and Band_3:
            arcpy.RasterCalculator_ia(expression=[BinariMaskCleaned], output_raster=BinariMaskNULL)

        # Process: Raster to Polygon (2) (Raster to Polygon) 
        BinariMaskNullPolygon = "C:\\Detekce\\Detekce.gdb\\BinariMaskNullPolygon"
        if Band_1 and Band_2 and Band_3:
            with arcpy.EnvManager(outputCoordinateSystem="PROJCS['S-JTSK_Krovak_East_North',GEOGCS['GCS_S_JTSK',DATUM['D_S_JTSK',SPHEROID['Bessel_1841',6377397.155,299.1528128]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Krovak'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Pseudo_Standard_Parallel_1',78.5],PARAMETER['Scale_Factor',0.9999],PARAMETER['Azimuth',30.28813975277778],PARAMETER['Longitude_Of_Center',24.83333333333333],PARAMETER['Latitude_Of_Center',49.5],PARAMETER['X_Scale',-1.0],PARAMETER['Y_Scale',1.0],PARAMETER['XY_Plane_Rotation',90.0],UNIT['Meter',1.0]]", outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPolygon_conversion(in_raster=BinariMaskNULL, out_polygon_features=BinariMaskNullPolygon, simplify="NO_SIMPLIFY", raster_field="Value", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Simplify Polygon (Simplify Polygon) 
        BinariMaskNullPolygonSimple = "C:\\Detekce\\Detekce.gdb\\BinariMaskNullPolygonSimple"
        if Band_1 and Band_2 and Band_3:
            with arcpy.EnvManager(outputCoordinateSystem="PROJCS['S-JTSK_Krovak_East_North',GEOGCS['GCS_S_JTSK',DATUM['D_S_JTSK',SPHEROID['Bessel_1841',6377397.155,299.1528128]],PRIMEM['Greenwich',0.0],UNIT['Degree',0.0174532925199433]],PROJECTION['Krovak'],PARAMETER['False_Easting',0.0],PARAMETER['False_Northing',0.0],PARAMETER['Pseudo_Standard_Parallel_1',78.5],PARAMETER['Scale_Factor',0.9999],PARAMETER['Azimuth',30.28813975277778],PARAMETER['Longitude_Of_Center',24.83333333333333],PARAMETER['Latitude_Of_Center',49.5],PARAMETER['X_Scale',-1.0],PARAMETER['Y_Scale',1.0],PARAMETER['XY_Plane_Rotation',90.0],UNIT['Meter',1.0]]", transferGDBAttributeProperties=False):
                BinariMaskNullPolygonSimple_Pnt = arcpy.SimplifyPolygon_cartography(in_features=BinariMaskNullPolygon, out_feature_class=BinariMaskNullPolygonSimple, algorithm="BEND_SIMPLIFY", tolerance="1 Meters", minimum_area="1 SquareMeters", error_option="RESOLVE_ERRORS", collapsed_point_option="NO_KEEP", in_barriers=[])[0]

        # Process: Add Field (11) (Add Field) 
        if Band_1 and Band_2 and Band_3:
            BinariMaskNullPolygonSimple_2_ = arcpy.AddField_management(in_table=BinariMaskNullPolygonSimple, field_name="Kompaktonst", field_type="FLOAT", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (9) (Calculate Field) 
        if Band_1 and Band_2 and Band_3:
            BinariMaskNullPolygonSimple_4_ = arcpy.CalculateField_management(in_table=BinariMaskNullPolygonSimple_2_, field="Kompaktonst", expression="!Shape_Length! /  math.sqrt(!Shape_Area!)", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]

        # Process: Select Layer By Attribute (2) (Select Layer By Attribute) 
        if Band_1 and Band_2 and Band_3:
            BinariMaskNullPolygonSimple_1, Count_2_ = arcpy.SelectLayerByAttribute_management(in_layer_or_view=BinariMaskNullPolygonSimple_4_, selection_type="NEW_SELECTION", where_clause="Kompaktonst <= 4 And Shape_Area <= 200", invert_where_clause="")

        # Process: Copy Features (2) (Copy Features) 
        FirstSelect = "C:\\Detekce\\Detekce.gdb\\FirstSelect"
        if Band_1 and Band_2 and Band_3:
            arcpy.CopyFeatures_management(in_features=BinariMaskNullPolygonSimple_1, out_feature_class=FirstSelect, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Zonal Statistics (Zonal Statistics) 
        ZonalFirst = "C:\\Detekce\\Detekce.gdb\\ZonalFirst"
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            arcpy.ZonalStatistics_ia(in_zone_data=FirstSelect, zone_field="Id", in_value_raster=CHM, out_raster=ZonalFirst, statistics_type="MEAN", ignore_nodata="DATA", process_as_multidimensional="CURRENT_SLICE")

        # Process: Int (2) (Int) 
        ZonalFirstInt = "C:\\Detekce\\Detekce.gdb\\ZonalFirstInt"
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            arcpy.Int_3d(in_raster_or_constant=ZonalFirst, out_raster=ZonalFirstInt)

        # Process: Extract by Attributes (2) (Extract by Attributes) 
        FristZonalSelect = "C:\\Detekce\\Detekce.gdb\\FristZonalSelect"
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            arcpy.gp.ExtractByAttributes_sa(in_raster=ZonalFirstInt, where_clause="Value >= 1.5", out_raster=FristZonalSelect)

        # Process: Raster to Polygon (3) (Raster to Polygon) 
        FirstZonalSelectPol = "C:\\Detekce\\Detekce.gdb\\FirstZonalSelectPol"
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPolygon_conversion(in_raster=FristZonalSelect, out_polygon_features=FirstZonalSelectPol, simplify="SIMPLIFY", raster_field="VALUE", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Select Layer By Location (Select Layer By Location) 
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            Layer_With_Selection, Output_Layer_Names, Count_3_ = arcpy.SelectLayerByLocation_management(in_layer=[FirstSelect], overlap_type="INTERSECT", select_features=FirstZonalSelectPol, search_distance="", selection_type="NEW_SELECTION", invert_spatial_relationship="NOT_INVERT")

        # Process: Copy Features (3) (Copy Features) 
        CrownDelineation1 = "C:\\Detekce\\Detekce.gdb\\CrownDelineation1"
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            arcpy.CopyFeatures_management(in_features=Layer_With_Selection, out_feature_class=CrownDelineation1, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Erase (3) (Erase) 
        IteratedVegetationMask = "C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask"
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            arcpy.Erase_analysis(in_features=BinariMaskNullPolygonSimple, erase_features=CrownDelineation1, out_feature_class=IteratedVegetationMask, cluster_tolerance="")

        # Process: Add Field (4) (Add Field) 
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            IteratedVegetationMask_2_ = arcpy.AddField_management(in_table=IteratedVegetationMask, field_name="Raster", field_type="SHORT", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (4) (Calculate Field) 
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            IteratedVegetationMask_3_ = arcpy.CalculateField_management(in_table=IteratedVegetationMask_2_, field="Raster", expression="1", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]

        # Process: Polygon to Raster (5) (Polygon to Raster) 
        IteratedVegetationMaskRaster = "C:\\Detekce\\Detekce.gdb\\IteratedVegetationMaskRaster"
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            arcpy.PolygonToRaster_conversion(in_features=IteratedVegetationMask_3_, value_field="Raster", out_rasterdataset=IteratedVegetationMaskRaster, cell_assignment="CELL_CENTER", priority_field="NONE", cellsize="0.1")

        # Process: Raster Calculator (7) (Raster Calculator) 
        CHM_Masked = "C:\\Detekce\\Detekce.gdb\\CHM_Masked"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.RasterCalculator_ia(expression=[CHM, IteratedVegetationMaskRaster], output_raster=CHM_Masked)

        # Process: Raster Calculator (8) (Raster Calculator) 
        CHM_Corrected = "C:\\Detekce\\Detekce.gdb\\CHM_Corrected"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.RasterCalculator_ia(expression=[CHM_Masked, CHM_Masked], output_raster=CHM_Corrected)

        # Process: Extract by Attributes (4) (Extract by Attributes) 
        CHM_HighVegetation = "C:\\Detekce\\Detekce.gdb\\CHM_HighVegetation"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.ExtractByAttributes_sa(in_raster=CHM_Corrected, where_clause="VALUE >= 2", out_raster=CHM_HighVegetation)

        # Process: Raster Calculator (15) (Raster Calculator) 
        CHM_HighVegetationMask = "C:\\Detekce\\Detekce.gdb\\CHM_HighVegetationMask"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.RasterCalculator_ia(expression=[CHM_HighVegetation, CHM_HighVegetation], output_raster=CHM_HighVegetationMask)

        # Process: Int (Int) 
        CHM_HighVegetationMaskInt = "C:\\Detekce\\Detekce.gdb\\CHM_HighVegetationMaskInt"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.Int_3d(in_raster_or_constant=CHM_HighVegetationMask, out_raster=CHM_HighVegetationMaskInt)

        # Process: Raster to Polygon (5) (Raster to Polygon) 
        CHM_HighVegatationPolygon = "C:\\Detekce\\Detekce.gdb\\CHM_HighVegatationPolygon"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPolygon_conversion(in_raster=CHM_HighVegetationMaskInt, out_polygon_features=CHM_HighVegatationPolygon, simplify="NO_SIMPLIFY", raster_field="VALUE", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Simplify Polygon (2) (Simplify Polygon) 
        CHM_HighVegatationPolygonSimple = "C:\\Detekce\\Detekce.gdb\\CHM_HighVegatationPolygonSimple"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            with arcpy.EnvManager(transferGDBAttributeProperties=False):
                CHM_HighVegatationPolygonSimple_Pnt = arcpy.SimplifyPolygon_cartography(in_features=CHM_HighVegatationPolygon, out_feature_class=CHM_HighVegatationPolygonSimple, algorithm="BEND_SIMPLIFY", tolerance="1 Meters", minimum_area="1 SquareMeters", error_option="RESOLVE_ERRORS", collapsed_point_option="NO_KEEP", in_barriers=[])[0]

        # Process: Minimum Bounding Geometry (2) (Minimum Bounding Geometry) 
        BoundingGeometry2nd = "C:\\Detekce\\Detekce.gdb\\BoundingGeometry2nd"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.MinimumBoundingGeometry_management(in_features=CHM_HighVegatationPolygonSimple, out_feature_class=BoundingGeometry2nd, geometry_type="RECTANGLE_BY_AREA", group_option="NONE", group_field=[], mbg_fields_option="MBG_FIELDS")

        # Process: Add Field (6) (Add Field) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            BoundingGeometry_7_ = arcpy.AddField_management(in_table=BoundingGeometry2nd, field_name="Side_ratio", field_type="DOUBLE", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (6) (Calculate Field) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            BoundingGeometry_8_ = arcpy.CalculateField_management(in_table=BoundingGeometry_7_, field="Side_ratio", expression="!MBG_Width! / !MBG_Length!", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]

        # Process: Select Layer By Attribute (6) (Select Layer By Attribute) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            BoundingGeometry2nd_Layer, Count_9_ = arcpy.SelectLayerByAttribute_management(in_layer_or_view=BoundingGeometry_8_, selection_type="NEW_SELECTION", where_clause="Side_ratio >= 0.7 And Side_ratio <= 1.2 And MBG_Width < 15 And MBG_Length < 15 And Shape_Area > 4", invert_where_clause="NON_INVERT")

        # Process: Copy Features (9) (Copy Features) 
        BoundingGeometrySelection2nd = "C:\\Detekce\\Detekce.gdb\\BoundingGeometrySelection2nd"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.CopyFeatures_management(in_features=BoundingGeometry2nd_Layer, out_feature_class=BoundingGeometrySelection2nd, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Feature To Point (5) (Feature To Point) 
        BoundingGeometrySelection2ndC = "C:\\Detekce\\Detekce.gdb\\BoundingGeometrySelection2ndC"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.FeatureToPoint_management(in_features=BoundingGeometrySelection2nd, out_feature_class=BoundingGeometrySelection2ndC, point_location="CENTROID")

        # Process: Select Layer By Location (4) (Select Layer By Location) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            BinariMaskNullPolygonRefined_2_, Output_Layer_Names_4_, Count_10_ = arcpy.SelectLayerByLocation_management(in_layer=[CHM_HighVegatationPolygonSimple], overlap_type="INTERSECT", select_features=BoundingGeometrySelection2ndC, search_distance="", selection_type="NEW_SELECTION", invert_spatial_relationship="NOT_INVERT")

        # Process: Copy Features (10) (Copy Features) 
        SecondSelect = "C:\\Detekce\\Detekce.gdb\\SecondSelect"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.CopyFeatures_management(in_features=BinariMaskNullPolygonRefined_2_, out_feature_class=SecondSelect, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Add Field (3) (Add Field) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            BinariMaskNullPolygonSimple_6_ = arcpy.AddField_management(in_table=SecondSelect, field_name="Kompaktonst", field_type="FLOAT", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (2) (Calculate Field) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            BinariMaskNullPolygonSimple_3_ = arcpy.CalculateField_management(in_table=BinariMaskNullPolygonSimple_6_, field="Kompaktonst", expression="!Shape_Length! /  math.sqrt(!Shape_Area!)", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]

        # Process: Select Layer By Attribute (3) (Select Layer By Attribute) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            SecondSelect_Layer1, Count_4_ = arcpy.SelectLayerByAttribute_management(in_layer_or_view=BinariMaskNullPolygonSimple_3_, selection_type="NEW_SELECTION", where_clause="Kompaktonst <= 6 And Shape_Area <= 200", invert_where_clause="")

        # Process: Copy Features (4) (Copy Features) 
        CrownDelineation2 = "C:\\Detekce\\Detekce.gdb\\CrownDelineation2"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.CopyFeatures_management(in_features=SecondSelect_Layer1, out_feature_class=CrownDelineation2, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Erase (4) (Erase) 
        EraseFromMask = "C:\\Detekce\\Detekce.gdb\\EraseFromMask"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.Erase_analysis(in_features=CHM_HighVegatationPolygonSimple, erase_features=CrownDelineation2, out_feature_class=EraseFromMask, cluster_tolerance="")

        # Process: Select Layer By Attribute (7) (Select Layer By Attribute) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMaskRaster:
            IteratedVegetationMask2_Laye, Count_11_ = arcpy.SelectLayerByAttribute_management(in_layer_or_view=EraseFromMask, selection_type="NEW_SELECTION", where_clause="Shape_Area <= 4", invert_where_clause="")

        # Process: Erase (5) (Erase) 
        IteratedVegetationMask2 = "C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask2"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.Erase_analysis(in_features=EraseFromMask, erase_features=IteratedVegetationMask2_Laye, out_feature_class=IteratedVegetationMask2, cluster_tolerance="")

        # Process: Minimum Bounding Geometry (3) (Minimum Bounding Geometry) 
        BoundingGeometry3rd = "C:\\Detekce\\Detekce.gdb\\BoundingGeometry3rd"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMaskRaster:
            arcpy.MinimumBoundingGeometry_management(in_features=IteratedVegetationMask2, out_feature_class=BoundingGeometry3rd, geometry_type="CIRCLE", group_option="NONE", group_field=[], mbg_fields_option="MBG_FIELDS")

        # Process: Spatial Join (Spatial Join) 
        IteratedVegetationMask2Joined = "C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask2Joined"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMaskRaster:
            arcpy.SpatialJoin_analysis(target_features=IteratedVegetationMask2, join_features=BoundingGeometry3rd, out_feature_class=IteratedVegetationMask2Joined, join_operation="JOIN_ONE_TO_ONE", join_type="KEEP_ALL", field_mapping="Id \"Id\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask2,Id,-1,-1;gridcode \"gridcode\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask2,gridcode,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask2,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask2,Shape_Area,-1,-1;Id_1 \"Id\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\BoundingGeometry3rd,Id,-1,-1;gridcode_1 \"gridcode\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\BoundingGeometry3rd,gridcode,-1,-1;Shape_Length_1 \"Shape_Length\" false true true 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\BoundingGeometry3rd,Shape_Length,-1,-1;Shape_Area_1 \"Shape_Area\" false true true 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\BoundingGeometry3rd,Shape_Area,-1,-1;ORIG_FID \"ORIG_FID\" true true false 0 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\BoundingGeometry3rd,ORIG_FID,-1,-1;MBG_Diameter \"MBG_Diameter\" true true false 0 Double 3 9,First,#,C:\\Detekce\\Detekce.gdb\\BoundingGeometry3rd,MBG_Diameter,-1,-1", match_option="HAVE_THEIR_CENTER_IN", search_radius="", distance_field_name="")

        # Process: Add Field (5) (Add Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMaskRaster:
            IteratedVegetationMask2Joined_2_ = arcpy.AddField_management(in_table=IteratedVegetationMask2Joined, field_name="Ratio_Areas", field_type="DOUBLE", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (5) (Calculate Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMaskRaster:
            IteratedVegetationMask2Joined_4_ = arcpy.CalculateField_management(in_table=IteratedVegetationMask2Joined_2_, field="Ratio_Areas", expression="!Shape_Area! / !Shape_Area_1! * 100", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]

        # Process: Select Layer By Attribute (8) (Select Layer By Attribute) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMaskRaster:
            IteratedVegetationMask2Joine, Count_12_ = arcpy.SelectLayerByAttribute_management(in_layer_or_view=IteratedVegetationMask2Joined_4_, selection_type="NEW_SELECTION", where_clause="Ratio_Areas >= 65 And Shape_Area < 200", invert_where_clause="")

        # Process: Copy Features (11) (Copy Features) 
        CrownDelineation3 = "C:\\Detekce\\Detekce.gdb\\CrownDelineation3"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMaskRaster:
            arcpy.CopyFeatures_management(in_features=IteratedVegetationMask2Joine, out_feature_class=CrownDelineation3, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Erase (6) (Erase) 
        IteratedVegetationMask3 = "C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask3"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMaskRaster:
            arcpy.Erase_analysis(in_features=IteratedVegetationMask2, erase_features=CrownDelineation3, out_feature_class=IteratedVegetationMask3, cluster_tolerance="")

        # Process: Select Layer By Attribute (9) (Select Layer By Attribute) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster:
            IteratedVegetationMask3_Laye, Count_13_ = arcpy.SelectLayerByAttribute_management(in_layer_or_view=IteratedVegetationMask3, selection_type="NEW_SELECTION", where_clause="Shape_Area >= 3000", invert_where_clause="")

        # Process: Resample (3) (Resample) 
        CHM_Corrected_Resample = "C:\\Detekce\\Detekce.gdb\\CHM_Corrected_Resample"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.Resample_management(in_raster=CHM_Corrected, out_raster=CHM_Corrected_Resample, cell_size="0.75 0.75", resampling_type="NEAREST")

        # Process: Raster Calculator (14) (Raster Calculator) 
        CHM_Negative = "C:\\Detekce\\Detekce.gdb\\CHM_Negative"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.RasterCalculator_ia(expression=[CHM_Corrected_Resample], output_raster=CHM_Negative)

        # Process: Filter (2) (Filter) 
        Negative_CHM_LowPass_3_ = "C:\\Detekce\\Detekce.gdb\\Negative_CHM_LowPass"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.Filter_sa(in_raster=CHM_Negative, out_raster=Negative_CHM_LowPass_3_, filter_type="LOW", ignore_nodata="DATA")

        # Process: Focal Flow (2) (Focal Flow) 
        FocalFlow_3_ = "C:\\Detekce\\Detekce.gdb\\FocalFlow"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.FocalFlow_sa(in_surface_raster=Negative_CHM_LowPass_3_, out_raster=FocalFlow_3_, threshold_value=0)

        # Process: Extract by Attributes (8) (Extract by Attributes) 
        Extract_FocalFlow_3_ = "C:\\Detekce\\Detekce.gdb\\Extract_FocalFlow"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.ExtractByAttributes_sa(in_raster=FocalFlow_3_, where_clause="Value = 255", out_raster=Extract_FocalFlow_3_)

        # Process: Raster to Point (Raster to Point) 
        Extract_FocalC = "C:\\Detekce\\Detekce.gdb\\Extract_FocalC"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPoint_conversion(in_raster=Extract_FocalFlow_3_, out_point_features=Extract_FocalC, raster_field="VALUE")

        # Process: Integrate (Integrate) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            Updated_Input_Features = arcpy.Integrate_management(in_features=[[Extract_FocalC, ""]], cluster_tolerance="1.5 Meters")[0]

        # Process: Copy Features (14) (Copy Features) 
        Extract_FocalCRefined = "C:\\Detekce\\Detekce.gdb\\Extract_FocalCRefined"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.CopyFeatures_management(in_features=Extract_FocalC, out_feature_class=Extract_FocalCRefined, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Copy Features (12) (Copy Features) 
        BroadVegetation = "C:\\Detekce\\Detekce.gdb\\BroadVegetation"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster:
            arcpy.CopyFeatures_management(in_features=IteratedVegetationMask3_Laye, out_feature_class=BroadVegetation, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Polygon to Raster (Polygon to Raster) 
        BroadVegetationRaster = "C:\\Detekce\\Detekce.gdb\\BroadVegetationRaster"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster:
            arcpy.PolygonToRaster_conversion(in_features=BroadVegetation, value_field="OBJECTID", out_rasterdataset=BroadVegetationRaster, cell_assignment="CELL_CENTER", priority_field="NONE", cellsize="0.2")

        # Process: Raster Calculator (12) (Raster Calculator) 
        BroaderVegeattionNull = "C:\\Detekce\\Detekce.gdb\\BroaderVegeattionNull"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster:
            arcpy.RasterCalculator_ia(expression=[BroadVegetationRaster], output_raster=BroaderVegeattionNull)

        # Process: Reclassify (2) (Reclassify) 
        BroaderVegeattionNullNegative = "C:\\Detekce\\Detekce.gdb\\BroaderVegeattionNullNegative"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster:
            arcpy.Reclassify_3d(in_raster=BroaderVegeattionNull, reclass_field="Value", remap="1 NODATA;NODATA 1", out_raster=BroaderVegeattionNullNegative, missing_values="DATA")

        # Process: Distance Allocation (2) (Distance Allocation) 
        DistanceAllocationBroad = "C:\\Detekce\\Detekce.gdb\\DistanceAllocationBroad"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.gp.DistanceAllocation_sa(in_source_data=Extract_FocalCRefined, out_distance_allocation_raster=DistanceAllocationBroad, in_barrier_data=BroaderVegeattionNullNegative, in_surface_raster=CHM_Corrected, in_cost_raster="", in_vertical_raster="", vertical_factor="BINARY 1 -30 30", in_horizontal_raster="", horizontal_factor="BINARY 1 45", out_distance_accumulation_raster=Out_distance_accumulation_raster_2_, out_back_direction_raster=Out_back_direction_raster, out_source_direction_raster=Out_source_direction_raster_2_, out_source_location_raster=Out_source_location_raster_2_, source_field="OBJECTID", source_initial_accumulation="", source_maximum_accumulation="", source_cost_multiplier="", source_direction="", distance_method="PLANAR")

        # Process: Raster to Polygon (6) (Raster to Polygon) 
        CrownDelineation4 = "C:\\Detekce\\Detekce.gdb\\CrownDelineation4"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPolygon_conversion(in_raster=DistanceAllocationBroad, out_polygon_features=CrownDelineation4, simplify="NO_SIMPLIFY", raster_field="VALUE", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Erase (7) (Erase) 
        IteratedVegetationMask4 = "C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask4"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.Erase_analysis(in_features=IteratedVegetationMask3, erase_features=CrownDelineation4, out_feature_class=IteratedVegetationMask4, cluster_tolerance="")

        # Process: Zonal Statistics (3) (Zonal Statistics) 
        ZonalHeight = "C:\\Detekce\\Detekce.gdb\\ZonalHeight"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.ZonalStatistics_ia(in_zone_data=IteratedVegetationMask4, zone_field="Id", in_value_raster=CHM_Corrected, out_raster=ZonalHeight, statistics_type="STD", ignore_nodata="DATA", process_as_multidimensional="CURRENT_SLICE")

        # Process: Reclassify (3) (Reclassify) 
        ZonaHeightReclass = "C:\\Detekce\\Detekce.gdb\\ZonaHeightReclass"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.Reclassify_3d(in_raster=ZonalHeight, reclass_field="VALUE", remap="2.085652 4 1;4 26.397520 2", out_raster=ZonaHeightReclass, missing_values="DATA")

        # Process: Raster to Polygon (7) (Raster to Polygon) 
        ZonaHeightReclassPolygon = "C:\\Detekce\\Detekce.gdb\\ZonaHeightReclassPolygon"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPolygon_conversion(in_raster=ZonaHeightReclass, out_polygon_features=ZonaHeightReclassPolygon, simplify="NO_SIMPLIFY", raster_field="VALUE", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Select Layer By Attribute (10) (Select Layer By Attribute) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            ZonaHeightReclassPolygon_Lay4, Count_14_ = arcpy.SelectLayerByAttribute_management(in_layer_or_view=ZonaHeightReclassPolygon, selection_type="NEW_SELECTION", where_clause="gridcode = 2", invert_where_clause="")

        # Process: Select Layer By Attribute (11) (Select Layer By Attribute) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            ZonaHeightReclassPolygon_Lay5, Count_15_ = arcpy.SelectLayerByAttribute_management(in_layer_or_view=ZonaHeightReclassPolygon, selection_type="NEW_SELECTION", where_clause="gridcode = 1", invert_where_clause="")

        # Process: Resample (2) (Resample) 
        CHM_Corrected_Resample5_1 = "C:\\Detekce\\Detekce.gdb\\CHM_Corrected_Resample5_1"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.Resample_management(in_raster=CHM_Corrected, out_raster=CHM_Corrected_Resample5_1, cell_size="0.75 0.75", resampling_type="NEAREST")

        # Process: Raster Calculator (13) (Raster Calculator) 
        CHM_Negative5_1 = "C:\\Detekce\\Detekce.gdb\\CHM_Negative5_1"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.RasterCalculator_ia(expression=[CHM_Corrected_Resample5_1], output_raster=CHM_Negative5_1)

        # Process: Filter (3) (Filter) 
        Negative_CHM_LowPass5_1 = "C:\\Detekce\\Detekce.gdb\\Negative_CHM_LowPass5_1"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.Filter_sa(in_raster=CHM_Negative5_1, out_raster=Negative_CHM_LowPass5_1, filter_type="LOW", ignore_nodata="DATA")

        # Process: Focal Flow (3) (Focal Flow) 
        FocalFlow5_1 = "C:\\Detekce\\Detekce.gdb\\FocalFlow5_1"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.FocalFlow_sa(in_surface_raster=Negative_CHM_LowPass5_1, out_raster=FocalFlow5_1, threshold_value=0)

        # Process: Extract by Attributes (9) (Extract by Attributes) 
        Extract_FocalFlow5_1 = "C:\\Detekce\\Detekce.gdb\\Extract_FocalFlow5_1"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.ExtractByAttributes_sa(in_raster=FocalFlow5_1, where_clause="Value = 255", out_raster=Extract_FocalFlow5_1)

        # Process: Raster to Point (2) (Raster to Point) 
        Extract_FocalC5_1 = "C:\\Detekce\\Detekce.gdb\\Extract_FocalC5_1"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPoint_conversion(in_raster=Extract_FocalFlow5_1, out_point_features=Extract_FocalC5_1, raster_field="VALUE")

        # Process: Integrate (2) (Integrate) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            Updated_Input_Features_2_ = arcpy.Integrate_management(in_features=[[Extract_FocalC5_1, ""]], cluster_tolerance="1.5 Meters")[0]

        # Process: Copy Features (13) (Copy Features) 
        Extract_FocalC5_1Refined = "C:\\Detekce\\Detekce.gdb\\Extract_FocalC5_1Refined"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster and Updated_Input_Features_2_:
            arcpy.CopyFeatures_management(in_features=Extract_FocalC5_1, out_feature_class=Extract_FocalC5_1Refined, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Erase (8) (Erase) 
        IteratedVegetationMask5_1 = "C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask5_1"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.Erase_analysis(in_features=IteratedVegetationMask4, erase_features=ZonaHeightReclassPolygon_Lay4, out_feature_class=IteratedVegetationMask5_1, cluster_tolerance="")

        # Process: Polygon to Raster (2) (Polygon to Raster) 
        VegetationRaster5_1 = "C:\\Detekce\\Detekce.gdb\\VegetationRaster5_1"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.PolygonToRaster_conversion(in_features=IteratedVegetationMask5_1, value_field="OBJECTID", out_rasterdataset=VegetationRaster5_1, cell_assignment="CELL_CENTER", priority_field="NONE", cellsize="0.2")

        # Process: Raster Calculator (17) (Raster Calculator) 
        VegeattionNull5_1 = "C:\\Detekce\\Detekce.gdb\\VegeattionNull5_1"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.RasterCalculator_ia(expression=[VegetationRaster5_1], output_raster=VegeattionNull5_1)

        # Process: Reclassify (4) (Reclassify) 
        VegeattionNullNegative5_1 = "C:\\Detekce\\Detekce.gdb\\VegeattionNullNegative5_1"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.Reclassify_3d(in_raster=VegeattionNull5_1, reclass_field="Value", remap="1 NODATA;NODATA 1", out_raster=VegeattionNullNegative5_1, missing_values="DATA")

        # Process: Distance Allocation (3) (Distance Allocation) 
        DistanceAllocation5_1 = "C:\\Detekce\\Detekce.gdb\\DistanceAllocation5_1"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_:
            arcpy.gp.DistanceAllocation_sa(in_source_data=Extract_FocalC5_1Refined, out_distance_allocation_raster=DistanceAllocation5_1, in_barrier_data=VegeattionNullNegative5_1, in_surface_raster=CHM_Corrected, in_cost_raster="", in_vertical_raster="", vertical_factor="BINARY 1 -30 30", in_horizontal_raster="", horizontal_factor="BINARY 1 45", out_distance_accumulation_raster=Out_distance_accumulation_raster_3_, out_back_direction_raster=Out_back_direction_raster_3_, out_source_direction_raster=Out_source_direction_raster_3_, out_source_location_raster=Out_source_location_raster_3_, source_field="OBJECTID", source_initial_accumulation="", source_maximum_accumulation="", source_cost_multiplier="", source_direction="", distance_method="PLANAR")

        # Process: Resample (4) (Resample) 
        CHM_Corrected_Resample5_2 = "C:\\Detekce\\Detekce.gdb\\CHM_Corrected_Resample5_2"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.Resample_management(in_raster=CHM_Corrected, out_raster=CHM_Corrected_Resample5_2, cell_size="1.5 1.5", resampling_type="NEAREST")

        # Process: Raster Calculator (16) (Raster Calculator) 
        CHM_Negative5_2 = "C:\\Detekce\\Detekce.gdb\\CHM_Negative5_2"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.RasterCalculator_ia(expression=[CHM_Corrected_Resample5_2], output_raster=CHM_Negative5_2)

        # Process: Filter (4) (Filter) 
        Negative_CHM_LowPass5_2 = "C:\\Detekce\\Detekce.gdb\\Negative_CHM_LowPass5_2"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.Filter_sa(in_raster=CHM_Negative5_2, out_raster=Negative_CHM_LowPass5_2, filter_type="LOW", ignore_nodata="DATA")

        # Process: Focal Flow (4) (Focal Flow) 
        FocalFlow5_2 = "C:\\Detekce\\Detekce.gdb\\FocalFlow5_2"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.FocalFlow_sa(in_surface_raster=Negative_CHM_LowPass5_2, out_raster=FocalFlow5_2, threshold_value=0)

        # Process: Extract by Attributes (10) (Extract by Attributes) 
        Extract_FocalFlow5_2 = "C:\\Detekce\\Detekce.gdb\\Extract_FocalFlow5_2"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            arcpy.gp.ExtractByAttributes_sa(in_raster=FocalFlow5_2, where_clause="Value = 255", out_raster=Extract_FocalFlow5_2)

        # Process: Raster to Point (3) (Raster to Point) 
        Extract_FocalC5_2 = "C:\\Detekce\\Detekce.gdb\\Extract_FocalC5_2"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPoint_conversion(in_raster=Extract_FocalFlow5_2, out_point_features=Extract_FocalC5_2, raster_field="VALUE")

        # Process: Integrate (3) (Integrate) 
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster:
            Updated_Input_Features_3_ = arcpy.Integrate_management(in_features=[[Extract_FocalC5_2, ""]], cluster_tolerance="1.5 Meters")[0]

        # Process: Copy Features (15) (Copy Features) 
        Extract_FocalC5_2Refined = "C:\\Detekce\\Detekce.gdb\\Extract_FocalC5_2Refined"
        if Band_1 and Band_2 and Band_3 and CHM and DTM_Resample and IteratedVegetationMaskRaster and Updated_Input_Features_3_:
            arcpy.CopyFeatures_management(in_features=Extract_FocalC5_2, out_feature_class=Extract_FocalC5_2Refined, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Erase (9) (Erase) 
        IteratedVegetationMask5_2 = "C:\\Detekce\\Detekce.gdb\\IteratedVegetationMask5_2"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.Erase_analysis(in_features=IteratedVegetationMask4, erase_features=ZonaHeightReclassPolygon_Lay5, out_feature_class=IteratedVegetationMask5_2, cluster_tolerance="")

        # Process: Polygon to Raster (3) (Polygon to Raster) 
        VegetationRaster5_2 = "C:\\Detekce\\Detekce.gdb\\VegetationRaster5_2"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.PolygonToRaster_conversion(in_features=IteratedVegetationMask5_2, value_field="OBJECTID", out_rasterdataset=VegetationRaster5_2, cell_assignment="CELL_CENTER", priority_field="NONE", cellsize="0.2")

        # Process: Raster Calculator (18) (Raster Calculator) 
        VegeattionNull5_2 = "C:\\Detekce\\Detekce.gdb\\VegeattionNull5_2"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.RasterCalculator_ia(expression=[VegetationRaster5_2], output_raster=VegeattionNull5_2)

        # Process: Reclassify (5) (Reclassify) 
        VegeattionNullNegative5_2 = "C:\\Detekce\\Detekce.gdb\\VegeattionNullNegative5_2"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features:
            arcpy.Reclassify_3d(in_raster=VegeattionNull5_2, reclass_field="Value", remap="1 NODATA;NODATA 1", out_raster=VegeattionNullNegative5_2, missing_values="DATA")

        # Process: Distance Allocation (4) (Distance Allocation) 
        DistanceAllocation5_2 = "C:\\Detekce\\Detekce.gdb\\DistanceAllocation5_2"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_3_:
            arcpy.gp.DistanceAllocation_sa(in_source_data=Extract_FocalC5_2Refined, out_distance_allocation_raster=DistanceAllocation5_2, in_barrier_data=VegeattionNullNegative5_2, in_surface_raster=CHM_Corrected, in_cost_raster="", in_vertical_raster="", vertical_factor="BINARY 1 -30 30", in_horizontal_raster="", horizontal_factor="BINARY 1 45", out_distance_accumulation_raster=Out_distance_accumulation_raster_4_, out_back_direction_raster=Out_back_direction_raster_4_, out_source_direction_raster=Out_source_direction_raster_4_, out_source_location_raster=Out_source_location_raster_4_, source_field="OBJECTID", source_initial_accumulation="", source_maximum_accumulation="", source_cost_multiplier="", source_direction="", distance_method="PLANAR")

        # Process: Parse Path (Parse Path) 
        Path, Name, Extension, Workspace_Name = arcpy.ParsePathExt_mb(in_data_element=ORTOFOTO, format="FORMAT")

        # Process: Raster to Polygon (8) (Raster to Polygon) 
        CrownDelineation5_1 = "C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPolygon_conversion(in_raster=DistanceAllocation5_1, out_polygon_features=CrownDelineation5_1, simplify="NO_SIMPLIFY", raster_field="VALUE", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Raster to Polygon (9) (Raster to Polygon) 
        CrownDelineation5_2 = "C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_3_:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPolygon_conversion(in_raster=DistanceAllocation5_2, out_polygon_features=CrownDelineation5_2, simplify="NO_SIMPLIFY", raster_field="VALUE", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Merge (4) (Merge) 
        CrownMerge1 = "C:\\Detekce\\Detekce.gdb\\CrownMerge1"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_:
            arcpy.Merge_management(inputs=[CrownDelineation4, CrownDelineation3, CrownDelineation5_1, CrownDelineation5_2, CrownDelineation2], output=CrownMerge1, field_mappings="Id \"Id\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,ID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,ID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,ID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,ID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,ID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,ID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,ID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,ID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,ID,-1,-1,C:\\Detekce\\Detekce.gdb\\SecondSelect,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Id,-1,-1;gridcode \"gridcode\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,GRIDCODE,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,GRIDCODE,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,GRIDCODE,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,GRIDCODE,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,GRIDCODE,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,GRIDCODE,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,GRIDCODE,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,GRIDCODE,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,GRIDCODE,-1,-1,C:\\Detekce\\Detekce.gdb\\SecondSelect,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,gridcode,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\SecondSelect,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation4,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation5_2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\SecondSelect,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Shape_Area,-1,-1;Join_Count \"Join_Count\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Join_Count,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Join_Count,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Join_Count,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Join_Count,-1,-1;TARGET_FID \"TARGET_FID\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,TARGET_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,TARGET_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,TARGET_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,TARGET_FID,-1,-1;Id_1 \"Id\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Id_1,-1,-1;gridcode_1 \"gridcode\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,gridcode_1,-1,-1;Shape_Length_1 \"Shape_Length\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Length_1,-1,-1;Shape_Area_1 \"Shape_Area\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Shape_Area_1,-1,-1;ORIG_FID \"ORIG_FID\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,ORIG_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,ORIG_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,ORIG_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,ORIG_FID,-1,-1;MBG_Diameter \"MBG_Diameter\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,MBG_Diameter,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,MBG_Diameter,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,MBG_Diameter,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,MBG_Diameter,-1,-1;Ratio_Areas \"Ratio_Areas\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Ratio_Areas,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Ratio_Areas,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Ratio_Areas,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation3,Ratio_Areas,-1,-1;InPoly_FID \"InPoly_FID\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\SecondSelect,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,InPoly_FID,-1,-1;SimPgnFlag \"SimPgnFlag\" true true false 2 Short 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\SecondSelect,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,SimPgnFlag,-1,-1;MaxSimpTol \"MaxSimpTol\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\SecondSelect,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MaxSimpTol,-1,-1;MinSimpTol \"MinSimpTol\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\SecondSelect,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,MinSimpTol,-1,-1;Kompaktonst \"Kompaktonst\" true true false 4 Float 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Kompaktonst,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Kompaktonst,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation2,Kompaktonst,-1,-1", add_source="NO_SOURCE_INFO")

        # Process: Smooth Polygon (2) (Smooth Polygon) 
        CrownMerge1Smooth = "C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_:
            with arcpy.EnvManager(transferGDBAttributeProperties=False):
                arcpy.SmoothPolygon_cartography(in_features=CrownMerge1, out_feature_class=CrownMerge1Smooth, algorithm="PAEK", tolerance="1 Meters", endpoint_option="FIXED_ENDPOINT", error_option="RESOLVE_ERRORS", in_barriers=[])

        # Process: Merge (5) (Merge) 
        CrownMerge2 = "C:\\Detekce\\Detekce.gdb\\CrownMerge2"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_:
            arcpy.Merge_management(inputs=[CrownMerge1Smooth, CrownDelineation1], output=CrownMerge2, field_mappings="Id \"Id\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Id,-1,-1;gridcode \"gridcode\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,gridcode,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Shape_Area,-1,-1;InPoly_FID \"InPoly_FID\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,InPoly_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,InPoly_FID,-1,-1;SmoPgnFlag \"SmoPgnFlag\" true true false 2 Short 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,SmoPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,SmoPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,SmoPgnFlag,-1,-1;SimPgnFlag \"SimPgnFlag\" true true false 2 Short 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,SimPgnFlag,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,SimPgnFlag,-1,-1;MaxSimpTol \"MaxSimpTol\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,MaxSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,MaxSimpTol,-1,-1;MinSimpTol \"MinSimpTol\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,MinSimpTol,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,MinSimpTol,-1,-1;Join_Count \"Join_Count\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Join_Count,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Join_Count,-1,-1;TARGET_FID \"TARGET_FID\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,TARGET_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,TARGET_FID,-1,-1;Id_1 \"Id\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Id_1,-1,-1;gridcode_1 \"gridcode\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,gridcode_1,-1,-1;Shape_Length_1 \"Shape_Length\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Length_1,-1,-1;Shape_Area_1 \"Shape_Area\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area_1,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Shape_Area_1,-1,-1;ORIG_FID \"ORIG_FID\" true true false 4 Long 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,ORIG_FID,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,ORIG_FID,-1,-1;MBG_Diameter \"MBG_Diameter\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,MBG_Diameter,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,MBG_Diameter,-1,-1;Ratio_Areas \"Ratio_Areas\" true true false 8 Double 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Ratio_Areas,-1,-1,C:\\Detekce\\Detekce.gdb\\CrownMerge1Smooth,Ratio_Areas,-1,-1;Kompaktonst \"Kompaktonst\" true true false 4 Float 0 0,First,#,C:\\Detekce\\Detekce.gdb\\CrownDelineation1,Kompaktonst,-1,-1", add_source="NO_SOURCE_INFO")

        # Process: Integrate (4) (Integrate) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_:
            Updated_Input_Features_4_ = arcpy.Integrate_management(in_features=[[CrownMerge2, ""]], cluster_tolerance="0.3 Meters")[0]

        # Process: Multipart To Singlepart (Multipart To Singlepart) 
        CrownUpdate = "C:\\Detekce\\Detekce.gdb\\CrownUpdate"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.MultipartToSinglepart_management(in_features=CrownMerge2, out_feature_class=CrownUpdate)

        # Process: Select Layer By Attribute (Select Layer By Attribute) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            CrownUpdate_2_, Count = arcpy.SelectLayerByAttribute_management(in_layer_or_view=CrownUpdate, selection_type="NEW_SELECTION", where_clause="Shape_Area <= 1", invert_where_clause="")

        # Process: Copy Features (Copy Features) 
        CrownUpdateErase = "C:\\Detekce\\Detekce.gdb\\CrownUpdateErase"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.CopyFeatures_management(in_features=CrownUpdate_2_, out_feature_class=CrownUpdateErase, config_keyword="", spatial_grid_1=None, spatial_grid_2=None, spatial_grid_3=None)

        # Process: Erase (Erase) 
        CrownUpdate3 = "C:\\Detekce\\Detekce.gdb\\CrownUpdate3"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.Erase_analysis(in_features=CrownUpdate, erase_features=CrownUpdateErase, out_feature_class=CrownUpdate3, cluster_tolerance="")

        # Process: Delete Field (Delete Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            CrownUpdate3_2_ = arcpy.DeleteField_management(in_table=CrownUpdate3, drop_field=["InPoly_FID", "SmoPgnFlag", "SimPgnFlag", "MaxSimpTol", "MinSimpTol", "ORIG_FID"])[0]

        # Process: Add Field (2) (Add Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            Update_2_ = arcpy.AddField_management(in_table=CrownUpdate3_2_, field_name="Prumer_Koruny", field_type="DOUBLE", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (3) (Calculate Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            Update_3_ = arcpy.CalculateField_management(in_table=Update_2_, field="Prumer_Koruny", expression="(math.sqrt(!Shape_Area! / math.pi)) * 2", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]

        # Process: Feature To Point (Feature To Point) 
        CrownPoints = "C:\\Detekce\\Detekce.gdb\\CrownPoints"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.FeatureToPoint_management(in_features=Update_3_, out_feature_class=CrownPoints, point_location="INSIDE")

        # Process: Add Field (10) (Add Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            CrownPoints_5_ = arcpy.AddField_management(in_table=CrownPoints, field_name="Stred_Koruny_Y", field_type="DOUBLE", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Add Field (9) (Add Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            CrownPoints_4_ = arcpy.AddField_management(in_table=CrownPoints_5_, field_name="Stred_Koruny_X", field_type="DOUBLE", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Geometry Attributes (Calculate Geometry Attributes) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            CrownPoints_2_ = CalculateGeometryAttributes(in_features=CrownPoints_4_, geometry_property=[["Stred_Koruny_Y", "POINT_Y"], ["Stred_Koruny_X", "POINT_X"]], length_unit="", area_unit="", coordinate_system="", coordinate_format="SAME_AS_INPUT")[0]

        # Process: Zonal Statistics (2) (Zonal Statistics) 
        Height = "C:\\Detekce\\Detekce.gdb\\Height"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.ZonalStatistics_ia(in_zone_data=CrownUpdate3, zone_field="OBJECTID", in_value_raster=CHM, out_raster=Height, statistics_type="MEAN", ignore_nodata="DATA", process_as_multidimensional="CURRENT_SLICE")

        # Process: Extract Values to Points (Extract Values to Points) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.gp.ExtractValuesToPoints_sa(in_point_features=CrownPoints_2_, in_raster=Height, out_point_features=_Name_KorunBody, interpolate_values="NONE", add_attributes="VALUE_ONLY")

        # Process: Alter Field (Alter Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            _Name_KorunBody_2_ = arcpy.AlterField_management(in_table=_Name_KorunBody, field="RASTERVALU", new_field_name="Vyska_Koruny", new_field_alias="", field_type="", field_length=4, field_is_nullable="NON_NULLABLE", clear_field_alias="CLEAR_ALIAS")[0]

        # Process: Delete Field (2) (Delete Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            _Name_KorunBody_3_ = arcpy.DeleteField_management(in_table=_Name_KorunBody_2_, drop_field=["Id", "gridcode", "ORIG_FID"])[0]

        # Process: Spatial Join (2) (Spatial Join) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.SpatialJoin_analysis(target_features=Update_3_, join_features=_Name_KorunBody_3_, out_feature_class=_Name_KorunyPolygony, join_operation="JOIN_ONE_TO_ONE", join_type="KEEP_ALL", field_mapping=fr"Id \"Id\" true true false 4 Long 0 0,First,#,C:\Detekce\Detekce.gdb\CrownUpdate3,Id,-1,-1;gridcode \"gridcode\" true true false 4 Long 0 0,First,#,C:\Detekce\Detekce.gdb\CrownUpdate3,gridcode,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0,First,#,C:\Detekce\Detekce.gdb\CrownUpdate3,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0,First,#,C:\Detekce\Detekce.gdb\CrownUpdate3,Shape_Area,-1,-1;Prumer_Koruny \"Prumer_Koruny\" true true false 8 Double 0 0,First,#,C:\Detekce\Detekce.gdb\CrownUpdate3,Prumer_Koruny,-1,-1;Vyska_Koruny \"Vyska_Koruny\" true true false 4 Float 0 0,First,#,C:\Detekce\Detekce.gdb\{Name}_KorunBody,Vyska_Koruny,-1,-1", match_option="INTERSECT", search_radius="", distance_field_name="")

        # Process: Add Field (Add Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            _Name_KorunyPolygony_2_ = arcpy.AddField_management(in_table=_Name_KorunyPolygony, field_name="Typ", field_type="LONG", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (Calculate Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            _Name_KorunyPolygony_3_ = arcpy.CalculateField_management(in_table=_Name_KorunyPolygony_2_, field="Typ", expression="3", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]

        # Process: Add Field (8) (Add Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            _Name_KorunyPolygony_5_ = arcpy.AddField_management(in_table=_Name_KorunyPolygony_3_, field_name="PREV_ID", field_type="LONG", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (8) (Calculate Field) 
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            _Name_KorunyPolygony_6_ = arcpy.CalculateField_management(in_table=_Name_KorunyPolygony_5_, field="PREV_ID", expression="!OBJECTID!", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]

        # Process: Raster Calculator (10) (Raster Calculator) 
        VegetationForClasses = "C:\\Detekce\\Detekce.gdb\\VegetationForClasses"
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            arcpy.RasterCalculator_ia(expression=[CHM, BinariMaskNULL], output_raster=VegetationForClasses)

        # Process: Reclassify (Reclassify) 
        Mid_Low_Non = "C:\\Detekce\\Detekce.gdb\\Mid_Low_Non"
        if Band_1 and Band_2 and Band_3 and DTM_Resample:
            arcpy.Reclassify_3d(in_raster=VegetationForClasses, reclass_field="VALUE", remap="-163.871567 0.500000 1;0.500000 2 2;2 43.162003 0;NODATA 0", out_raster=Mid_Low_Non, missing_values="DATA")

        # Process: Polygon to Raster (4) (Polygon to Raster) 
        TreeClassNODATA = "C:\\Detekce\\Detekce.gdb\\TreeClassNODATA"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.PolygonToRaster_conversion(in_features=_Name_KorunyPolygony, value_field="Join_Count", out_rasterdataset=TreeClassNODATA, cell_assignment="CELL_CENTER", priority_field="NONE", cellsize="0.2")

        # Process: Reclassify (6) (Reclassify) 
        TreeClassNODATAnegative = "C:\\Detekce\\Detekce.gdb\\TreeClassNODATAnegative"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.Reclassify_3d(in_raster=TreeClassNODATA, reclass_field="VALUE", remap="1 11561 NODATA;NODATA 1", out_raster=TreeClassNODATAnegative, missing_values="DATA")

        # Process: Raster Calculator (19) (Raster Calculator) 
        ClassesWithoutTrees = "C:\\Detekce\\Detekce.gdb\\ClassesWithoutTrees"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Mid_Low_Non and TreeClassNODATAnegative and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.RasterCalculator_ia(expression=[Mid_Low_Non, TreeClassNODATAnegative], output_raster=ClassesWithoutTrees)

        # Process: Raster to Polygon (Raster to Polygon) 
        ClassesWithoutTreesPolygon = "C:\\Detekce\\Detekce.gdb\\ClassesWithoutTreesPolygon"
        if Band_1 and Band_2 and Band_3 and CHM and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Mid_Low_Non and TreeClassNODATAnegative and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            with arcpy.EnvManager(outputMFlag="Disabled", outputZFlag="Disabled"):
                arcpy.RasterToPolygon_conversion(in_raster=ClassesWithoutTrees, out_polygon_features=ClassesWithoutTreesPolygon, simplify="SIMPLIFY", raster_field="Value", create_multipart_features="SINGLE_OUTER_PART", max_vertices_per_feature=None)

        # Process: Add Field (7) (Add Field) 
        if Band_1 and Band_2 and Band_3 and CHM and ClassesWithoutTreesPolygon and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Mid_Low_Non and TreeClassNODATAnegative and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            ClassesWithoutTreesPolygon_2_ = arcpy.AddField_management(in_table=ClassesWithoutTreesPolygon, field_name="Typ", field_type="LONG", field_precision=None, field_scale=None, field_length=None, field_alias="", field_is_nullable="NULLABLE", field_is_required="NON_REQUIRED", field_domain="")[0]

        # Process: Calculate Field (7) (Calculate Field) 
        if Band_1 and Band_2 and Band_3 and CHM and ClassesWithoutTreesPolygon and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Mid_Low_Non and TreeClassNODATAnegative and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            ClassesWithoutTreesPolygon_3_ = arcpy.CalculateField_management(in_table=ClassesWithoutTreesPolygon_2_, field="Typ", expression="!gridcode!", expression_type="PYTHON3", code_block="", field_type="TEXT")[0]

        # Process: Merge (Merge) 
        if Band_1 and Band_2 and Band_3 and CHM and ClassesWithoutTreesPolygon and ClassesWithoutTreesPolygon_3_ and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Mid_Low_Non and TreeClassNODATAnegative and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            arcpy.Merge_management(inputs=[ClassesWithoutTreesPolygon_3_, _Name_KorunyPolygony_6_], output=_Name_Klasifikace, field_mappings=fr"Id \"Id\" true true false 4 Long 0 0,First,#,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Id,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Id,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Id,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Id,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,ID,-1,-1;gridcode \"gridcode\" true true false 4 Long 0 0,First,#,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,gridcode,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,gridcode,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,gridcode,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,gridcode,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,GRIDCODE,-1,-1;Shape_Length \"Shape_Length\" false true true 8 Double 0 0,First,#,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Length,-1,-1,,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Length,-1,-1;Shape_Area \"Shape_Area\" false true true 8 Double 0 0,First,#,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Area,-1,-1,,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Shape_Area,-1,-1;Typ \"Typ\" true true false 4 Long 0 0,First,#,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Typ,-1,-1,,Typ,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1,C:\Detekce\Detekce.gdb\ClassesWithoutTreesPolygon,Typ,-1,-1;Prumer_Koruny \"Prumer_Koruny\" true true false 8 Double 0 0,First,#,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Prumer_Koruny,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Prumer_Koruny,-1,-1,,Prumer_Koruny,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Prumer_Koruny,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Prumer_Koruny,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Prumer_Koruny,-1,-1;Vyska_Koruny \"Vyska_Koruny\" true true false 4 Float 0 0,First,#,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Vyska_Koruny,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Vyska_Koruny,-1,-1,,Vyska_Koruny,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Vyska_Koruny,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Vyska_Koruny,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Vyska_Koruny,-1,-1;PREV_ID \"PREV_ID\" true true false 4 Long 0 0,First,#,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,PREV_ID,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,PREV_ID,-1,-1,,PREV_ID,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,PREV_ID,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,PREV_ID,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,PREV_ID,-1,-1;Join_Count \"Join_Count\" true true false 0 Long 0 0,First,#,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Join_Count,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Join_Count,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,Join_Count,-1,-1;TARGET_FID \"TARGET_FID\" true true false 0 Long 0 0,First,#,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,TARGET_FID,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,TARGET_FID,-1,-1,C:\Detekce\Detekce.gdb\{Name}_KorunyPolygony,TARGET_FID,-1,-1", add_source="NO_SOURCE_INFO")

        # Process: Delete Field (4) (Delete Field) 
        if Band_1 and Band_2 and Band_3 and CHM and ClassesWithoutTreesPolygon and ClassesWithoutTreesPolygon_3_ and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Mid_Low_Non and TreeClassNODATAnegative and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_:
            _Name_Klasifikace_3_ = arcpy.DeleteField_management(in_table=_Name_Klasifikace, drop_field=["Id", "gridcode", "PREV_ID", "Join_Count", "TARGET_FID"])[0]

        # Process: Delete Field (5) (Delete Field) 
        if Band_1 and Band_2 and Band_3 and CHM and ClassesWithoutTreesPolygon and ClassesWithoutTreesPolygon_3_ and CrownDelineation2 and CrownDelineation4 and DTM_Resample and Extract_FocalC5_1Refined and Extract_FocalC5_2Refined and Extract_FocalCRefined and IteratedVegetationMask2 and IteratedVegetationMask3 and IteratedVegetationMaskRaster and Mid_Low_Non and TreeClassNODATAnegative and Update_3_ and Updated_Input_Features and Updated_Input_Features_2_ and Updated_Input_Features_3_ and Updated_Input_Features_4_ and _Name_Klasifikace_3_:
            _Name_KorunyPolygony_4_ = arcpy.DeleteField_management(in_table=_Name_KorunyPolygony_6_, drop_field=["PREV_ID", "Join_Count", "TARGET_FID", "gridcode"])[0]

if __name__ == '__main__':
    # Global Environment settings
    with arcpy.EnvManager(scratchWorkspace=r"C:\Detekce\Detekce.gdb", workspace=r"C:\Detekce\Detekce.gdb"):
        Detekce(*argv[1:])
